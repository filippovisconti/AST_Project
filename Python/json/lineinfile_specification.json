{
  "module_name": "ansible.builtin.lineinfile",
  "description": "Note",
  "options": [
    {
      "name": "attributes",
      "type": "string",
      "required": false,
      "description": "The attributes the resulting filesystem object should have. To get supported flags look at the man page for chattr on the target system. This string should contain the attributes in the same order as the one displayed by lsattr. The = operator is assumed as default, otherwise + or - operators need to be included in the string. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "backrefs",
      "type": "boolean",
      "required": false,
      "description": "Used with state=present. If set, line can contain backreferences (both positional and named) that will get populated if the regexp matches. This parameter changes the operation of the module slightly; insertbefore and insertafter will be ignored, and if the regexp does not match anywhere in the file, the file will be left unchanged. If the regexp does match, the last matching line will be replaced by the expanded line parameter. Mutually exclusive with search_string. Choices:  false \u2190 (default) true  ",
      "choices": [
        "false",
        "true"
      ],
      "default": "false",
      "mutually_exclusive_with": [
        "search_string"
      ],
      "deprecated": false
    },
    {
      "name": "backup",
      "type": "boolean",
      "required": false,
      "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly. Choices:  false \u2190 (default) true  ",
      "choices": [
        "false",
        "true"
      ],
      "default": "false",
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "create",
      "type": "boolean",
      "required": false,
      "description": "Used with state=present. If specified, the file will be created if it does not already exist. By default it will fail if the file is missing. Choices:  false \u2190 (default) true  ",
      "choices": [
        "false",
        "true"
      ],
      "default": "false",
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "firstmatch",
      "type": "boolean",
      "required": false,
      "description": "Used with insertafter or insertbefore. If set, insertafter and insertbefore will work with the first line that matches the given regular expression. Choices:  false \u2190 (default) true  ",
      "choices": [
        "false",
        "true"
      ],
      "default": "false",
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "group",
      "type": "string",
      "required": false,
      "description": "Name of the group that should own the filesystem object, as would be fed to chown. When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "insertafter",
      "type": "string",
      "required": false,
      "description": "Used with state=present. If specified, the line will be inserted after the last match of specified regular expression. If the first match is required, use(firstmatch=yes). A special value is available; EOF for inserting the line at the end of the file. If specified regular expression has no matches, EOF will be used instead. If insertbefore is set, default value EOF will be ignored. If regular expressions are passed to both regexp and insertafter, insertafter is only honored if no match for regexp is found. May not be used with backrefs or insertbefore. Choices:  \"EOF\" \u2190 (default) \"*regex*\"  ",
      "choices": [
        "\"EOF\"",
        "\"*regex*\""
      ],
      "default": "\"EOF\"",
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "insertbefore",
      "type": "string",
      "required": false,
      "description": "Used with state=present. If specified, the line will be inserted before the last match of specified regular expression. If the first match is required, use firstmatch=yes. A value is available; BOF for inserting the line at the beginning of the file. If specified regular expression has no matches, the line will be inserted at the end of the file. If regular expressions are passed to both regexp and insertbefore, insertbefore is only honored if no match for regexp is found. May not be used with backrefs or insertafter. Choices:  \"BOF\" \"*regex*\"  ",
      "choices": [
        "\"BOF\"",
        "\"*regex*\""
      ],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "line",
      "type": "string",
      "required": false,
      "description": "The line to insert/replace into the file. Required for state=present. If backrefs is set, may contain backreferences that will get expanded with the regexp capture groups if the regexp matches. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "mode",
      "type": "mode",
      "required": false,
      "description": "The permissions the resulting filesystem object should have. For those used to /usr/bin/chmod remember that modes are actually octal numbers. You must either add a leading zero so that Ansible\u2019s YAML parser knows it is an octal number (like 0644 or 01777) or quote it (like '644' or '1777') so Ansible receives a string and can do its own conversion from string into number. Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, u+rwx or u=rw,g=r,o=r). If mode is not specified and the destination filesystem object does not exist, the default umask on the system will be used when setting the mode for the newly created filesystem object. If mode is not specified and the destination filesystem object does exist, the mode of the existing filesystem object will be used. Specifying mode is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "others",
      "type": "string",
      "required": false,
      "description": "All arguments accepted by the ansible.builtin.file module also work here. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "owner",
      "type": "string",
      "required": false,
      "description": "Name of the user that should own the filesystem object, as would be fed to chown. When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership. Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "path",
      "type": "path",
      "required": true,
      "description": "The file to modify. Before Ansible 2.3 this option was only usable as dest, destfile and name. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "regexp",
      "type": "string",
      "required": false,
      "description": "The regular expression to look for in every line of the file. For state=present, the pattern to replace if found. Only the last line found will be replaced. For state=absent, the pattern of the line(s) to remove. If the regular expression is not matched, the line will be added to the file in keeping with insertbefore or insertafter settings. When modifying a line the regexp should typically match both the initial state of the line as well as its state after replacement by line to ensure idempotence. Uses Python regular expressions. See https://docs.python.org/3/library/re.html. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "search_string",
      "type": "string",
      "required": false,
      "description": "The literal string to look for in every line of the file. This does not have to match the entire line. For state=present, the line to replace if the string is found in the file. Only the last line found will be replaced. For state=absent, the line(s) to remove if the string is in the line. If the literal expression is not matched, the line will be added to the file in keeping with insertbefore or insertafter settings. Mutually exclusive with backrefs and regexp. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [
        "backrefs and regexp"
      ],
      "deprecated": false
    },
    {
      "name": "selevel",
      "type": "string",
      "required": false,
      "description": "The level part of the SELinux filesystem object context. This is the MLS/MCS attribute, sometimes known as the range. When set to _default, it will use the level portion of the policy if available. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "serole",
      "type": "string",
      "required": false,
      "description": "The role part of the SELinux filesystem object context. When set to _default, it will use the role portion of the policy if available. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "setype",
      "type": "string",
      "required": false,
      "description": "The type part of the SELinux filesystem object context. When set to _default, it will use the type portion of the policy if available. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "seuser",
      "type": "string",
      "required": false,
      "description": "The user part of the SELinux filesystem object context. By default it uses the system policy, where applicable. When set to _default, it will use the user portion of the policy if available. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "state",
      "type": "string",
      "required": false,
      "description": "Whether the line should be there or not. Choices:  \"absent\" \"present\" \u2190 (default)  ",
      "choices": [
        "\"absent\"",
        "\"present\""
      ],
      "default": "\"present\"",
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "unsafe_writes",
      "type": "boolean",
      "required": false,
      "description": "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner. This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn\u2019t force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption. Choices:  false \u2190 (default) true  ",
      "choices": [
        "false",
        "true"
      ],
      "default": "false",
      "mutually_exclusive_with": [],
      "deprecated": false
    },
    {
      "name": "validate",
      "type": "string",
      "required": false,
      "description": "The validation command to run before copying the updated file into the final destination. A temporary file path is used to validate, passed in through \u2018%s\u2019 which must be present as in the examples below. Also, the command is passed securely so shell features such as expansion and pipes will not work. For an example on how to handle more complex validation than what this option provides, see handling complex validation. ",
      "choices": [],
      "default": null,
      "mutually_exclusive_with": [],
      "deprecated": false
    }
  ]
}